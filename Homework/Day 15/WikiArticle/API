應用程式介面（英語：Application Programming Interface[1]），縮寫為API[2]，是一種計算介面，它定義多個軟體中介之間的互動，以及可以進行的呼叫（call）或請求（request）的種類，如何進行呼叫或發出請求，應使用的資料格式，應遵循的慣例等。它還可以提供擴充機制，以便使用者可以通過各種方式對現有功能進行不同程度的擴充[3]。一個API可以是完全客製化的，針對某個組件的，也可以是基於行業標準設計的以確保互操作性。通過資訊隱藏，API實現了模組化編程，從而允許使用者實現獨立地使用介面。

應用程式介面是指電腦作業系統或程式函式庫提供給應用程式呼叫使用的程式碼，其主要目的是讓應用程式開發人員得以呼叫一組常式功能，而無須考慮其底層的原始碼為何、或理解其內部工作機制的細節。API本身是抽象的，它僅定義了一個介面，而不涉及應用程式在實作過程中的具體操作。

例如，圖形庫中的一組API定義了繪製指標的方式，可於圖形輸出裝置上顯示指標。當應用程式需要指標功能時，可在參照、編譯時連結到這組API，而執行時就會呼叫此API的實現（庫）來顯示指標。

應用程式介面可以是一組數量上千、極其複雜的函式和副程式，可讓程式設計師做很多工作，譬如「讀取檔案」、「顯示選單」、「在視窗中顯示網頁」等等。作業系統的API可用來分配記憶體或讀取檔案。許多系統應用程式藉由API介面來實現，像是圖形系統、資料庫、網路Web服務，甚至是線上遊戲。

應用程式介面有諸多不同設計。用於快速執行的介面通常包括函式、常數、變數與資料結構。也有其它方式，如通過直譯器，或是提供抽象層以遮蔽同API實現相關的資訊，確保使用API的代碼無需更改而適應實現變化。

應用程式介面經常是軟體開發套件（SDK）的一部分。

API又分為（Windows、Linux、Unix等系統的）系統級API，及非作業系統級的自訂API。作為一種有效的代碼封裝模式，微軟Windows的API開發模式已經為許多商業應用開發的公司所借鑑，並開發出某些商業應用系統的API函式予以發布，方便第三方進行功能擴充。如Google、蘋果電腦公司，以及諾基亞等手機開發的API等等。

