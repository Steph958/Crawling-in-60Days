C是一種通用的程式語言，廣泛用於系統軟體與應用軟體的開發。於1969年至1973年間，為了移植與開發UNIX作業系統，由丹尼斯·里奇與肯·湯普遜，以B語言為基礎，在貝爾實驗室設計、開發出來。

C語言具有高效、靈活、功能豐富、表達力強和較高的可移植性等特點，在程式設計中備受青睞，成為最近25年使用最為廣泛的程式語言[2]。目前，C語言編譯器普遍存在於各種不同的作業系統中，例如Microsoft Windows、macOS、Linux、Unix等。C語言的設計影響了眾多後來的程式語言，例如C++、Objective-C、Java、C#等。

二十世紀八十年代，為了避免各開發廠商用的C語言的語法產生差異，由美國國家標準局為C語言訂定了一套完整的國際標準語法，稱為ANSI C，作為C語言的標準。二十世紀八十年代至今的有關程式開發工具，一般都支援符合ANSI C的語法。

20世紀70年代，肯·湯姆森為了使其設計的Unix系統更加高效，使用B語言的變種（即C語言）重寫了Unix。在1978年，丹尼斯·里奇和布萊恩·柯林漢合作出版了《C程式設計語言》第一版，事實上即為K&R C標準[9]。在這之後，制定標準的工作轉移到ISO和ANSI。目前最新的C語言標準是C18。更多關於C語言的歷史資訊可以在C語言的歷史找到。

下面是一個在標準輸出裝置（stdout）上列印出 "Hello, world!" 字串的簡單程式。類似的程式，通常作為初學程式語言時的第一個程式：

其中只有int，void，return為C語言的關鍵字，前置處理器會將#include <stdio.h>替換為stdio.h檔案的內容。

main函式是C語言程式的入口點。

"Hello, world!\n"中的\n是一個跳脫字元，形式為\加上一個字元。所起的作用在ASCII碼中規定。

printf是聲明於stdio.h的函式，關於printf的更多細節，參見printf；

關于格式化字串的更多資訊，參見格式化字串。

C語言由函式和變數組成，C的函式就像是Fortran中的子程式和函式[10][11]。

在C語言中，程式從 main 開始執行。main 函式通過呼叫和控制其他函式進行工作。例如上面的printf。程式設計師可以自己寫函式，或從庫中呼叫函式。在上面的return 0; 使得 main 返回一個值給呼叫程式的殼層，表明程式是否成功執行。

一個C語言的函式由返回值、函式名、參數列和函式體組成。函式體的語法和其它的複合的語句部分是一樣的。

C語言中的複合語句（或稱語句塊）的格式為：

[12]
複合語句可以使得幾個語句從文法上變成一個語句。

有時必須使用複合語句，否則會產生錯誤。例如，在運用迴圈語句的時候，如果迴圈體（即迴圈中執行部分）包含多個語句（以分號隔開），則必須使用花括號將他們合併成一個複合語句。如果不這麼做，系統僅把第一個分號前的內容看做迴圈體。

需要注意的是，部分C編譯器並不支援在任意位置使用複合語句。

C語言有兩種條件語句形式，分別是if和switch。

If 的格式如下：

運算式的值非零表示條件為真；如果條件為假，程式將跳過if處的語句，直接執行if後面的語句。但是如果if後面有else，則當條件為假時，程式跳到else處執行。if和else後面的語句可以是另個if語句，這種套疊式的結構，允許更複雜的邏輯控制流程得以實現。在一般情況下，else一定與最接近的if成對，因此常用括弧{}越過此限制。比較下面兩種情況：

下面是if的另一種格式if……else if……else……
要注意這裡的縮排和換行只用於方便閱讀。編譯器並不會根據縮排層級猜測 if 和 else 的對應關係。

switch通常用於對幾種有明確值的條件進行控制。它要求的條件值通常是整數或字元。與switch搭配的條件轉移是case。使用case後面的標值，控制程式將跳到滿足條件的case處一直往下執行，直到語句結束或遇到break。通常可以使用default把其他例外的情況包含進去。如果switch語句中的條件不成立，控制程式將跳到default處執行；如果省略default子句，則直接執行下一語句。switch是可以巢狀的。

簡單的條件判斷也可用?:

C語言有三種形式的循環語句[13]：

和:

和:

在while和for中，語句將執行到表達式的值為零時結束。在do...while語句中，循環將至少被執行一次。這三種循環結構可以互相轉化：

如果語句中不使用continue語句的話，相當於

當循環條件一直為真時，將產生無窮迴圈。

跳轉語句包括四種：goto，continue，break和return[14]。

goto語句是無條件轉移語句，且標記必須在當前函式中定義，使用「標記:」的格式定義。程式將跳到標記處繼續執行。由於goto（特別是向回 goto 和長距離的 goto）容易產生閱讀上的困難，所以對新手應該儘量少用。GCC 編譯器拓展支援對指標 goto和巨集內 goto，一定程度上增強了 goto 的可讀性。


continue語句用在迴圈語句中，作用是結束當前一輪的迴圈，馬上開始下一輪迴圈。

break語句用在迴圈語句或switch中，作用是結束當前迴圈，跳到循環體外繼續執行。但是使用break只能跳出一層迴圈。在要跳出多重迴圈時，可以使用goto使得程式更為簡潔。

當一個函式執行結束後要返回一個值時，使用return。return可以跟一個運算式或變數。如果return後面沒有值，將執行不返回值。

見C和C++運算子。

見資料類型 (C語言)。

如果一個變數名後面跟著一個有數字的中括弧，這個聲明就是陣列聲明。字串也是一種陣列，它們以ASCII的NUL作為陣列的結束。要特別注意的是，方括內的索引值是從0算起的。

例如：

上面最後一個例子建立了一個陣列，但也可以把它看成是一個多維陣列。注意陣列的下標從0開始。這個陣列的結構如下：

例子中notfull建立了一個3*3的二維陣列，初始化時有些元素並未賦值。如下：

根據C標準的規定，在存在初始化列表時，如果初始化列表中未提供對所有元素的初始化，則剩餘元素會被預設初始化，並使用與靜態變數相同的初始化規則[15]。

如果一個變數聲明時在前面使用 * 號，表明這是個指標型變數[16]。換句話說，該變數儲存一個位址，而 *（此處特指單目運算子 *，下同。C語言中另有雙目運算子 * 表示乘） 則是取內容運算子，意思是取這個記憶體位址里儲存的內容。把這兩點結合在一起，可將 int *a;看作是 「*a 解得的內容類型為 int」，對更複雜的聲明也如此[註 1]。指標是 C 語言區別於其他同時代高階語言的主要特徵之一。

指標不僅可以是變數的位址，還可以是陣列、陣列元素、函式的位址。通過指標作為形式參數可以在函式的呼叫過程得到一個以上的返回值（不同於return z這樣的僅能得到一個返回值。

指標是一把雙刃劍，許多操作可以通過指標自然的表達，但是不正確的或者過分的使用指標又會給程式帶來大量潛在的錯誤。

例如：

儲存在指標中的位址所指向的數值在程式中可以由 * 讀取。例如，在第一個例子中， *pi 是一個整型資料。這叫做參照一個指標。

另一個運算子 &，叫做取位址運算子，它將返回一個變數、陣列或函式的儲存位址。因此，下面的例子：

i 和 *pi 在程式中可以相互替換使用，直到 pi 被改變成指向另一個變數的位址。

當指標指向結構體時，可以使用運算子 -> 代替 *和. 的作用，如 (*p).m 與 p->m 等效。

C語言的字串其實就是char型陣列，所以使用字串並不需要參照庫。然而C標準庫確實包含了用於對字串進行操作的函式，使得它們看起來就像字串而不是陣列。使用這些函式需要參照標頭檔string.h。

在C語言中，輸入和輸出是經由標準函式庫中的一組函式來實現的。在ANSI/ISO C中，這些函式被定義在標頭檔stdio.h中。

有三個標準輸入／輸出是標準I/O庫預先定義的：


下面的這個例子顯示了一個過濾程式（filter program）是怎樣構成的。

C語言的基本結構單位是函式[17]。系統首先呼叫 main函式（主函式），通過函式的巢狀呼叫，再呼叫其他函式。函式可以是系統內建的函式，也可以是使用者定義的函式。C語言中，不允許函式巢狀定義。

C語言的特色之一是：程式設計師必須親自處理記憶體的分配細節。

大多數C語言實現使用棧（Stack）來儲存函式返回位址／堆疊框基址、完成函式的參數傳遞和函式局部變數的儲存。然而，在部分極特殊的平台上，使用棧並不能獲得最大效率。此時的實現由編譯器決定[18]。
如果程式需要在執行的過程中動態分配記憶體，可以利用堆（Heap）來實現。

基本上C程式的元素儲存在記憶體的時候有3種分配策略：

如果一個變數聲明為全域變數或者是函式的靜態變數，這個變數的儲存將使用靜態分配方式。靜態分配的記憶體一般會被編譯器放在資料段或代碼段來儲存，具體取決於實現。這樣做的前提是，在編譯時就必須確定變數的大小。
以IA32的x86平台及gcc編譯器為例，全域及靜態變數放在資料段的低階；全域及靜態常數放在代碼段的高階。

函式的自動局部變數應該隨著函式的返回會自動釋放（失效），這個要求在一般的體系中都是利用棧（Stack）來滿足的。相比於靜態分配，這時候，就不必絕對要求這個變數在編譯時就必須確定變數的大小，執行時才決定也不遲，但是C89仍然要求在編譯時就要確定，而C99放鬆了這個限制。但無論是C89還是C99，都不允許一個已經分配的自動變數執行時改變大小。

所以說C函式永遠不應該返回一個局部變數的位址。

要指出的是，自動分配也屬於動態分配，甚至可以用alloca函式來像分配堆（Heap）一樣進行分配，而且釋放是自動的。

還有一種更加特殊的情況，變數的大小在執行時有可能改變，或者雖然單個變數大小不變，變數的數目卻有很大彈性，不能靜態分配或者自動分配，這時候可以使用堆（Heap）來滿足要求。ANSI C定義的堆操作函式是malloc、calloc、realloc和free。

使用堆（Heap）記憶體將帶來額外的開銷和風險。

C語言的特色之一是：語言不負責記憶體邊界檢查，這是因為在執行時進行記憶體邊界檢查會造成效能問題，與UNIX哲學不符。此特性容易導致緩衝區溢位問題。然而，部分編譯器（如英特爾編譯器）會出於安全性的考量，提供方法以進行執行時記憶體邊界檢查[19]。

C語言的標準文件要求了一個平台移植C語言的時候至少要實現的一些功能和封裝的集合，稱為「標準庫」，標準庫的聲明頭部通過前置處理器命令#include進行參照。

在C89標準中：

在94年的修正版中





在C99中增加了六個函式庫





以上是C語言的標準。各個系統各自又對C庫函式進行的各種擴充，就浩如煙海了。如POSIX C、GNU C等。

工具軟體可以幫助程式設計者避免一些程式中潛藏或容易出現的問題，例如常會造成程式未預期動作或是執行期錯誤的程式碼。

許多語言都有自動原始碼檢查及審計工具，C語言也有類似工具，像是Lint。可以在程式剛寫好時用Lint找出可能有問題的程式，通過Lint後再用C編譯器進行編譯，許多編譯器也可以設定是否要針對一些可能有問題的程式碼提出警告。MISRA C是一套針對嵌入式系統的法則，可主要也是避免一些可能有問題的程式碼。

也有一些編譯器、程式庫或作業系統可以處理一些非標準C語言的功能，例如邊界值檢查、緩衝區溢位偵測、序列化及自動垃圾回收功能。

使用像Valgrind或IBM Rational Purify（英語：Purify）等軟體工具，或者連結有特別malloc函式的程式庫，有助於找出一些運行期記憶體使用的問題。

以下是C語言的保留關鍵字：[20]

「void main()」的用法並不是任何標準制定的[21][22]。 C語言標準語法是「int main()」，任何實現都必須支援int main(void) { /* ... */ }和int main(int argc, char* argv[]) { /* ... */ }[23]。 在 C++ 標準中，main的標準型態應是int，否則類型是由實現定義的。任何實現都必須支援int main() { /* ... */ }和int main(int argc, char* argv[]) { /* ... */ }[24]。



