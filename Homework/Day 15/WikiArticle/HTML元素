HTML中，一個HTML元素是HTML檔案的一個基本組成單元。HTML檔案採用採用樹形結構安排HTML元素。更進一步的說，一個HTML元素是一個滿足一項或多項DTD要求的元素。HTML元素可以擁有屬性和內容，可以是標題、段落、連結、列表、嵌入媒體或者其他的任何符合DTD要求的格式。

在HTML語法中，大多數元素編寫一個開始標記和結束標記，與其之間的內容。HTML標記係由元素名稱，包圍於兩側之小於號與大於號之括號所組成。其結束標記擁有一斜線位在小於號之括號後，有別於其起始標記。例如：一個段落係由p元素所代表，其被寫成

然而，並非所有的此類元素需要結束標記，甚至是開始標記必須存在。某些元素，即所謂的void空元素，並無結束標記。典型的例子即br元素，其表示一個顯著之換行，像是一首詩或一個住址。一個空元素的行為是預先定義的，並且它不能包含任何內容或其他元素。例如：在電影海底總動員中的牙醫師的位址將被寫成

HTML元素可以是容器或者為空。
容器元素 結構如下：

空元素指僅包含一個標記，該標記既是開始標記同時也是結束標記。空元素可以有任意數量的屬性<标记名 />。在XHTML規範中，標記中的斜線符號是必須的[1]。要求使用一個單獨標籤開啟與關閉元素。若要指定其為一個空元素，符號"/"包含於標記之結尾（不能與位於結束標記中的開始的符號"/"混淆）。例如：

英語中有時HTML元素也被稱為「tags」，嚴格的說tag是指元素的開始或者結束標記。

HTML屬性（英語：HTML attribute）用來指示元素的附加的性質。放在開始標記中。例如：abbr元素，其表示縮寫，預計一個title屬性包含其開始標記。將被寫成

在HTML中，元素（和屬性）名字可以是大寫或者小寫，但在XHTML中，必須是小寫。[2]大寫是舊的用法，並且是HTML規範中說明的方法，但是小寫更為通用。

HTML元素是在自1995年以來發布的一系列免費開放標準中定義的，最初由IETF以及隨後由W3C制訂。

1990年代的瀏覽器大戰期間，網頁瀏覽器的軟體商開始不斷的添加自訂的元素，有些被後來的標準吸收。並非所有的軟體商都支援這些非標準的元素，一般對於非標準的元素，或者是忽略，或者是導致顯示不正確。

1998年，XML（一種簡化的SGML）引入一種方法，允許任何人開發自己的元素並融合到XHTML檔案中，使用支援XML的瀏覽器（使用者代理）可以瀏覽任意元素。[3]

而後採用XML相容的辦法，重新制訂了HTML 4.01標準，XHTML 1.0（擴充的HTML）。二者的元素相同，絕大多數情況下，XHTML 1.0檔案的元素在HTML 4.0檔案中是合法的。本文除非另外指出，應用的都是基於SGML的HTML，對於XHTML多數情況下仍然適用（二者區別見HTML）。

自從HTML第一版以來，已經有數個元素因為過期，不再新的標準中推薦使用或者乾脆刪除。

目前由於並存三種HTML 4.01／XHTML 1.0 DTD標準，而使得HTML的驗證變得複雜起來，這三種標準分別是：

HTML第一個標準（HTML 2.0）包含四個過期的元素。其中一個在HTML 3.2中被列為無效。所有的四個在HTML 4.01 Transitional中都被列為無效，HTML4.01 Transitional標準此外還將另外十個元素定義為無效。以上這些元素再加兩個在HTML 4.01 Strict中同樣被定義為無效。由於frame元素在顯示方面的諸多問題以及其功能已經可以由其他元素替代，在未來的標準中不再保留，雖然目前在Transitional和Frameset DTD中仍然有效。

（嚴格的說，目前的XHTML標準XHTML 1.1（2001）根本不支援frame。基本上與XHTML 1.0 Strict相同，但是又包含了Ruby markup模組。）[4]

一個經常導致錯誤理解的原因是不嚴格的使用deprecated（過期）一詞來泛指過期的和無效的，以及今後一段時間過期的不同的狀態。

根據分離原則，HTML的功能在於給一個檔案的內容增加語意和結構的資訊。增加檔案的展示和行為的功能，例如增加CSS stylesheets和圖形來增加檔案的展示功能；通過連結到外部檔案和指令碼增加與使用者互動的行為。User agent也可以根據作者所提供的stylesheet在不同的媒介（顯示器，印表機）上展示不同效果。同時保持語意上的一致。

<html>...</html>


<head>...</head>


<body>...</body>


<base/>


<basefont/> (deprecated)


<isindex/> (deprecated)


<link/>


<meta/>


HTML屬性（英語：HTML attribute）之其他未提供的資訊。因其共通性，meta元素指定關聯的key-value pairs。一般情況之下，meta元素傳達關於檔案之隱藏資訊。若干meta標籤可被使用，上述之全部應被巢狀在head元素中。每個 meta元素之特定目的是由其屬性來定義。

<object>...</object>


<script>...</script>


<style>...</style>


<title>...</title>


在視覺化瀏覽器中，可顯示元素可呈現為區塊或內行。雖然所有元素是檔案序列之一部分，但是區塊元素 出現在其父元素中：

反言之，內行元素被視為檔案文字流之部分；其無法擁有邊距、寬度或高度設定，並且跨行。

區塊元素（或稱區塊層級元素）擁有矩形結構。在預設情況下，這些元素將跨越其父元素的整個寬度，因而不允許任何其他元素佔據其相同水平空間，因為已被放置。

區塊元素的矩形結構經常稱之為盒模型，並由幾個部分所組成。每個元素包含以下內容：

上述部分僅指CSS彩現的具體實施，並與HTML元素本身無關。

<p>...</p>


<h1>...</h1>

<h2>...</h2>

<h3>...</h3>

<h4>...</h4>

<h5>...</h5>

<h6>...</h6>


<dl>...</dl>


<dt>...</dt>


<dd>...</dd>


<ol>...</ol>


<ul>...</ul>


<li>...</li>


<dir>...</dir> (deprecated)


<address>...</address>



<blockquote>...</blockquote>


<center>...</center> (deprecated)


<del>...</del>


<div>...</div>




<ins>...</ins>


<noscript>...</noscript>


<pre>...</pre>


<script>...</script>


行內元素無法直接放置在body元素中；其必須完全巢狀於區塊及元素中。[12]

<a>...</a>


<abbr>…</abbr>


<acronym>...</acronym> (deprecated)


<dfn>…</dfn>


<em>…</em>


<strong>…</strong>


這些與元素主要用於方便顯示電腦軟體編碼和與使用者互動（<code>）；顯示原始碼變數（<var>）；使用者輸入（<kbd>）；以及終端輸出（<samp>）。

<code>…</code>


<samp>…</samp>


<kbd>…</kbd>


<var>…</var>


視覺效果的元素僅僅對可視瀏覽器起作用，因此不推薦使用，如果可能應該使用層疊樣式表。部分元素在HTML 4 / XHTML 1.0中被宣布過期或者無效的，其它的在當前的XHTML 2.0草案XHTML 2.0（頁面存檔備份，存於網際網路檔案館）中被定義為無效的。當前的HTML 5草案HTML 5中，b, i和small還是有效的.

<b>…</b>


<img/>


<blink>...</blink> (deprecated)


<marquee>...</marquee> (deprecated)


在HTML中的 註解（以及相近的XML, SGML, SHTML. ）語法與SGML相同。

不同於其它HTML標籤，註解不支援巢狀結構。

標籤： <!--注解一<!--注解二-->注解三--> 看起來會是這樣 注解一<!--注解二 後面拖著一段沒有被標籤包起來的文字： 注解三-->

註解可以出現在檔案的任何地方，甚至可以在檔案類型宣告之前。
（在<!DOCTYPE HTML>之前。）
HTML的解釋器會忽略註解，只要它們不在HTML標籤內。
這裡標籤內的意思並非指被一對開始標籤及結束標籤包住的區域內，
而是指在開始標籤內，或結束標籤、空元素標籤內。

然而並非所有瀏覽器、HTML編輯器都與HTML語法完全相容，在某些特殊情況會造成意料之外的結果。
約有5%的瀏覽器、HTML編輯器在處理註解標籤上有缺陷。（其中大部份是IE6. ）
僅管只有少數版本有此問題。

一些有關註解的相容性問題：

