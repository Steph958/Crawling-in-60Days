JavaScript（通常縮寫為JS）是一種進階的、直譯的程式語言[8]。JavaScript是一門基於原型、頭等函式的語言[9]，是一門多範式的語言，它支援物件導向程式設計，指令式程式設計，以及函式語言程式設計。它提供語法來操控文字、陣列、日期以及正規表示式等，不支援I/O，比如網路、儲存和圖形等，但這些都可以由它的宿主環境提供支援。它已經由ECMA（歐洲電腦製造商協會）透過ECMAScript實作語言的標準化[8]。它被世界上的絕大多數網站所使用，也被世界主流瀏覽器（Chrome、IE、Firefox、Safari、Opera）支援。

JavaScript與Java在名字或語法上都有很多相似性，但這兩門程式語言從設計之初就有很大的不同，JavaScript的語言設計主要受到了Self（一種原型程式設計語言）和Scheme（一門函式語言程式設計語言）的影響[9]。在語法結構上它又與C語言有很多相似（例如if條件語句、switch語句、while迴圈、do-while迴圈等）[10]。

在客戶端，JavaScript在傳統意義上被實作為一種解釋語言，但在最近，它已經可以被即時編譯（JIT）執行。隨著最新的HTML5和CSS3語言標準的推行它還可用於遊戲、桌面和行動應用程式的開發和在伺服器端網路環境執行，如Node.js。

1993年，國家超級電腦應用中心（NCSA）發表了NCSA Mosaic，這是最早流行的圖形介面網頁瀏覽器，它在全球資訊網的普及上發揮了重要作用[11]。1994年，Mosaic的主要開發人員隨即創立了Netscape公司，並雇用了許多原來的NCSA Mosaic開發者用來開發Netscape Navigator，該公司的目標是取代NCSA Mosaic成為世界第一的網頁瀏覽器。在四個月內，已經佔據了四分之三的瀏覽器市場，並成為1990年代網際網路的主要瀏覽器[12]。網景預見到網路需要變得更動態。公司的創始人馬克·安德森認為HTML需要一種膠水語言，讓網頁設計師和兼職程式設計師可以很容易地使用它來組裝圖片和外掛程式之類的元件，且程式碼可以直接編寫在網頁標記中。

1995年，網景招募了布蘭登·艾克，目標是把Scheme語言嵌入到Netscape Navigator瀏覽器當中[13]。但更早之前，網景已經跟昇陽合作在Netscape Navigator中支援Java，這時網景內部產生激烈的爭論[14]。後來網景決定發明一種與Java搭配使用的輔助手稿語言並且語法上有些類似[15]，這個決策導致排除了採用現有的語言，例如Perl、Python、Tcl或Scheme。為了在其他競爭提案中捍衛JavaScript這個想法，公司需要有一個可以運作的原型。艾克在1995年5月僅花了十天時間就把原型設計出來了。

最初命名為Mocha，1995年9月在Netscape Navigator 2.0的Beta版中改名為LiveScript，同年12月，Netscape Navigator 2.0 Beta 3中部署時被重新命名為JavaScript[1][16]，當時網景公司與昇陽電腦公司組成的開發聯盟為了讓這門語言搭上Java這個程式語言「熱詞」，因此將其臨時改名為JavaScript，日後這成為大眾對這門語言有諸多誤解的原因之一[17]。

微軟公司於1995年首次推出Internet Explorer，從而引發了與Netscape的瀏覽器大戰。微軟對Netscape Navigator直譯器進行了逆向工程，建立了JScript，以與處於市場領導地位的網景產品同台競爭。JScript也是一種JavaScript實作，這兩個JavaScript語言版本在瀏覽器端共存意味著語言標準化的缺失，發展初期，JavaScript的標準並未確定，同期有網景的JavaScript，微軟的JScript雙峰並峙。除此之外，微軟也在網頁技術上加入了不少專屬物件，使不少網頁使用非微軟平台及瀏覽器無法正常顯示[18][19]，導致在瀏覽器大戰期間網頁設計者通常會把「用Netscape可達到最佳效果」或「用IE可達到最佳效果」的標誌放在首頁[18][20]。

1996年11月，網景正式向ECMA（歐洲電腦製造商協會）提交語言標準。1997年6月，ECMA以JavaScript語言為基礎制定了ECMAScript標準規範ECMA-262。JavaScript成為了ECMAScript最著名的實現之一[21]。除此之外，ActionScript和JScript也都是ECMAScript規範的實作語言。儘管JavaScript作為給非程式人員的手稿語言，而非作為給程式人員的程式語言來推廣和宣傳，但是JavaScript具有非常豐富的特性。

一般來說，完整的JavaScript包括以下幾個部分：

JavaScript的基本特點如下：

JavaScript常用來完成以下任務：

不同於伺服器端手稿語言，例如PHP與ASP，JavaScript主要被作為客戶端手稿語言在使用者的瀏覽器上運行，不需要伺服器的支援。所以在早期程式設計師比較青睞於JavaScript以減少對伺服器的負擔，而與此同時也帶來另一個問題：安全性。而隨著伺服器變得強大，現在的程式員更喜歡運行於伺服器端的指令碼以保證安全，但JavaScript仍然以其跨平台、容易上手等優勢大行其道。同時，有些特殊功能（如AJAX）必須依賴JavaScript在客戶端進行支援。隨著引擎如V8和框架如Node.js的發展，及其事件驅動及異步IO等特性，JavaScript逐漸被用來編寫伺服器端程式。且在近幾年中，Node.js的出世，讓JavaScript也具有了一定的伺服器功能。

以下是ECMAScript通常實作所共有的特性。

JavaScript從支援許多C語言的結構化編程語法（例如if條件語句、while迴圈、switch語句、do-while迴圈等）。但作用域是一個例外：JavaScript在過去只支援使用var關鍵字來定義變數的函式作用域。ECMAScript 2015加入了let關鍵字來支援塊級作用域[22]。意味著JavaScript現在既支援函式作用域又支援塊級作用域。和C語言一樣，JavaScript中的表達式和語句是不同的。有一點格式上的不同，JavaScript支援自動在語句末添加分號，因此允許忽略語句末尾的分號。[23]

Javascript是弱型別的，這意味著變數可以被隱式地轉換為另一個類型。[24]

下列為變數轉換為字串的例子：

類型的隱藏轉換，是JavaScript受到批評的原因之一，因為其增加了規則的複雜度與發生錯誤的可能性。[28]

JavaScript是動態型別的，正如大部分程式語言，其類型與值而不是與變數關聯。例如變數可以為數值，隨後又可被賦值為字串。JavaScript提供了包括鴨子型別在內的方法來檢測變數類型。

Javascript提供eval()函式，可以在執行時直接執行Javascript語句。[31]

在JavaScript中，物件是關聯陣列，透過原型（prototype，見下）進行擴充。每一個字串鍵值提供物件的一個屬性的名稱。可以透過兩種效果相同的方式進行存取：使用點號（obj.x）或使用方括號（obj['x']）。屬性可以在執行時添加、重定義或刪除。一個物件大多數屬性（包括來自原型繼承鏈的屬性）都可以透過 for...in迴圈存取。[32]

JavaScript使用原型，而許多其它物件導向語言使用類用於實作繼承。有了原型，使得在JavaScript中類比類別為基的物件導向特徵變成可能。[33]

函式在JavaScript中兼作為物件建構函式。在函式呼叫前加上new會建立一個原型的實例，並繼承來自建構函式的屬性和方法（包括來自Object原型）。[34]ECMAScript 5提供Object.create方法，可以顯式地建立實例還不是自動從Object繼承。[35]建構函式的prototype屬性決定了用於新物件的內部原型。可以透過修改建構函式的原型的方法來為物件添加新的方法。也可以修改JavaScript的內部物件的原型，如Array或Object。儘管可以這麼做，但對Object原型進行修改並不是一個好的做法。因為大多數JavaScript物件都會從Object繼承，且不會希望其原型做了修改。[36]

與大多數而向物件的語言不同，在JavaScript中函式定義與方法定義沒有明顯的區別。唯一的區別在於呼叫時：當函式被作為方法呼叫時，函式的this會指向呼叫此函式的物件。[37]

ECMAScript ES6加入了對class、extends關鍵字的支援，使得類的定義與繼承行為更加類似於其它物件導向語言，同時也更加容易使用。[38][39]

在JavaScript中，函式是一等的，函式也被認為是物件。因此，函式也可以有屬性與方法，例如call()和bind等。[40]巢狀函式指定義於其它函式內部的函式，在外部函式被呼叫時，巢狀函式會被建立。另外，巢狀函式是一個閉包，在外部函式的作用域（包括常數，局部變數和參數）都成為內部函式狀態的一部分，甚至在外部函式執行完畢後，內部函式的狀態依然保留。[41]JavaScript同時也支援匿名函式。[42]

JavaScript通常依賴於執行時環境（例如瀏覽器）來提供物件和方法，指令碼可以透過這些物件和方法與環境（例如網頁DOM）進行互動。它還依賴於執行時環境來提供包含/匯入指令碼（例如HTML的<script>元素）的功能。這本身不是語言功能，但是在大多數JavaScript實作中很常見。

JavaScript一般來說是單執行緒的。[43]為了並行地處理事件，JavaScript程式輸入/輸出是使用事件和回呼函式執行的。例如，這意味著JavaScript可以在等待資料庫查詢返回資訊時處理滑鼠單擊。ECMAScript ES6引入了Promise用於優雅地處理非同步事件，其可以使得傳統的基於回呼的非同步代碼更加清晰與簡單。[44][45]

JavaScript中函式的參數長度是可變的，在函式內部可以透過arguments物件存取這些參數。[46]

JavaScript是一種手稿語言，其原始碼在發往客戶端執行之前不需經過編譯，而是將文字格式的字元代碼發送給瀏覽器由瀏覽器解釋執行。直譯語言的弱點是安全性較差，而且在JavaScript中，如果一條執行不了，那麼下面的語言也無法執行。而其解決辦法就是於使用例外處理try {} catch () {}︰

JavaScript被歸類為直譯語言，因為目前主流的引擎都是每次執行時載入程式碼並解譯。V8是將所有程式碼解譯後再開始執行，其他引擎則是逐行解譯（SpiderMonkey會將解譯過的指令暫存，以提高效能，稱為即時編譯），但由於V8的核心部份多數用JavaScript撰寫（而SpiderMonkey是用C++），因此在不同的測試上，兩者效能互有優劣。

與其相對應的是編譯語言，例如C語言，以編譯語言編寫的程式在執行之前，必須經過編譯，將程式碼編譯為機器碼，再加以執行。

以下是一個簡單的JavaScript Hello World︰

或是在瀏覽器的網址列中使用javascript:，以互動方式表示：

JavaScript最初開發於1996年，被使用於Netscape Navigator網頁瀏覽器。同年微軟在Internet Explorer發布了一個實作。由於商標問題，這項實作被命名為JScript。1997年，JavaScript已經被網景公司提交給ECMA制定為標準，稱之為ECMAScript，標準編號ECMA-262。使用顯式版本號聲明對語言的參照，作爲一項Mozilla的特性，已在較新版本中被移除（至少為Firefox 59）。Firefox 4是最後一個需要顯式地在參照時聲明明確版本號的版本（1.8.5）。

下列表格的資訊基於多個參考來源[47][48][49][50]：





JavaScript（通常縮寫為JS）是一種進階的、直譯的程式語言[8]。JavaScript是一門基於原型、頭等函式的語言[9]，是一門多範式的語言，它支援物件導向程式設計，指令式程式設計，以及函式語言程式設計。它提供語法來操控文字、陣列、日期以及正規表示式等，不支援I/O，比如網路、儲存和圖形等，但這些都可以由它的宿主環境提供支援。它已經由ECMA（歐洲電腦製造商協會）透過ECMAScript實作語言的標準化[8]。它被世界上的絕大多數網站所使用，也被世界主流瀏覽器（Chrome、IE、Firefox、Safari、Opera）支援。

JavaScript與Java在名字或語法上都有很多相似性，但這兩門程式語言從設計之初就有很大的不同，JavaScript的語言設計主要受到了Self（一種原型程式設計語言）和Scheme（一門函式語言程式設計語言）的影響[9]。在語法結構上它又與C語言有很多相似（例如if條件語句、switch語句、while迴圈、do-while迴圈等）[10]。

在客戶端，JavaScript在傳統意義上被實作為一種解釋語言，但在最近，它已經可以被即時編譯（JIT）執行。隨著最新的HTML5和CSS3語言標準的推行它還可用於遊戲、桌面和行動應用程式的開發和在伺服器端網路環境執行，如Node.js。

1993年，國家超級電腦應用中心（NCSA）發表了NCSA Mosaic，這是最早流行的圖形介面網頁瀏覽器，它在全球資訊網的普及上發揮了重要作用[11]。1994年，Mosaic的主要開發人員隨即創立了Netscape公司，並雇用了許多原來的NCSA Mosaic開發者用來開發Netscape Navigator，該公司的目標是取代NCSA Mosaic成為世界第一的網頁瀏覽器。在四個月內，已經佔據了四分之三的瀏覽器市場，並成為1990年代網際網路的主要瀏覽器[12]。網景預見到網路需要變得更動態。公司的創始人馬克·安德森認為HTML需要一種膠水語言，讓網頁設計師和兼職程式設計師可以很容易地使用它來組裝圖片和外掛程式之類的元件，且程式碼可以直接編寫在網頁標記中。

1995年，網景招募了布蘭登·艾克，目標是把Scheme語言嵌入到Netscape Navigator瀏覽器當中[13]。但更早之前，網景已經跟昇陽合作在Netscape Navigator中支援Java，這時網景內部產生激烈的爭論[14]。後來網景決定發明一種與Java搭配使用的輔助手稿語言並且語法上有些類似[15]，這個決策導致排除了採用現有的語言，例如Perl、Python、Tcl或Scheme。為了在其他競爭提案中捍衛JavaScript這個想法，公司需要有一個可以運作的原型。艾克在1995年5月僅花了十天時間就把原型設計出來了。

最初命名為Mocha，1995年9月在Netscape Navigator 2.0的Beta版中改名為LiveScript，同年12月，Netscape Navigator 2.0 Beta 3中部署時被重新命名為JavaScript[1][16]，當時網景公司與昇陽電腦公司組成的開發聯盟為了讓這門語言搭上Java這個程式語言「熱詞」，因此將其臨時改名為JavaScript，日後這成為大眾對這門語言有諸多誤解的原因之一[17]。

微軟公司於1995年首次推出Internet Explorer，從而引發了與Netscape的瀏覽器大戰。微軟對Netscape Navigator直譯器進行了逆向工程，建立了JScript，以與處於市場領導地位的網景產品同台競爭。JScript也是一種JavaScript實作，這兩個JavaScript語言版本在瀏覽器端共存意味著語言標準化的缺失，發展初期，JavaScript的標準並未確定，同期有網景的JavaScript，微軟的JScript雙峰並峙。除此之外，微軟也在網頁技術上加入了不少專屬物件，使不少網頁使用非微軟平台及瀏覽器無法正常顯示[18][19]，導致在瀏覽器大戰期間網頁設計者通常會把「用Netscape可達到最佳效果」或「用IE可達到最佳效果」的標誌放在首頁[18][20]。

1996年11月，網景正式向ECMA（歐洲電腦製造商協會）提交語言標準。1997年6月，ECMA以JavaScript語言為基礎制定了ECMAScript標準規範ECMA-262。JavaScript成為了ECMAScript最著名的實現之一[21]。除此之外，ActionScript和JScript也都是ECMAScript規範的實作語言。儘管JavaScript作為給非程式人員的手稿語言，而非作為給程式人員的程式語言來推廣和宣傳，但是JavaScript具有非常豐富的特性。

一般來說，完整的JavaScript包括以下幾個部分：

JavaScript的基本特點如下：

JavaScript常用來完成以下任務：

不同於伺服器端手稿語言，例如PHP與ASP，JavaScript主要被作為客戶端手稿語言在使用者的瀏覽器上運行，不需要伺服器的支援。所以在早期程式設計師比較青睞於JavaScript以減少對伺服器的負擔，而與此同時也帶來另一個問題：安全性。而隨著伺服器變得強大，現在的程式員更喜歡運行於伺服器端的指令碼以保證安全，但JavaScript仍然以其跨平台、容易上手等優勢大行其道。同時，有些特殊功能（如AJAX）必須依賴JavaScript在客戶端進行支援。隨著引擎如V8和框架如Node.js的發展，及其事件驅動及異步IO等特性，JavaScript逐漸被用來編寫伺服器端程式。且在近幾年中，Node.js的出世，讓JavaScript也具有了一定的伺服器功能。

以下是ECMAScript通常實作所共有的特性。

JavaScript從支援許多C語言的結構化編程語法（例如if條件語句、while迴圈、switch語句、do-while迴圈等）。但作用域是一個例外：JavaScript在過去只支援使用var關鍵字來定義變數的函式作用域。ECMAScript 2015加入了let關鍵字來支援塊級作用域[22]。意味著JavaScript現在既支援函式作用域又支援塊級作用域。和C語言一樣，JavaScript中的表達式和語句是不同的。有一點格式上的不同，JavaScript支援自動在語句末添加分號，因此允許忽略語句末尾的分號。[23]

Javascript是弱型別的，這意味著變數可以被隱式地轉換為另一個類型。[24]

下列為變數轉換為字串的例子：

類型的隱藏轉換，是JavaScript受到批評的原因之一，因為其增加了規則的複雜度與發生錯誤的可能性。[28]

JavaScript是動態型別的，正如大部分程式語言，其類型與值而不是與變數關聯。例如變數可以為數值，隨後又可被賦值為字串。JavaScript提供了包括鴨子型別在內的方法來檢測變數類型。

Javascript提供eval()函式，可以在執行時直接執行Javascript語句。[31]

在JavaScript中，物件是關聯陣列，透過原型（prototype，見下）進行擴充。每一個字串鍵值提供物件的一個屬性的名稱。可以透過兩種效果相同的方式進行存取：使用點號（obj.x）或使用方括號（obj['x']）。屬性可以在執行時添加、重定義或刪除。一個物件大多數屬性（包括來自原型繼承鏈的屬性）都可以透過 for...in迴圈存取。[32]

JavaScript使用原型，而許多其它物件導向語言使用類用於實作繼承。有了原型，使得在JavaScript中類比類別為基的物件導向特徵變成可能。[33]

函式在JavaScript中兼作為物件建構函式。在函式呼叫前加上new會建立一個原型的實例，並繼承來自建構函式的屬性和方法（包括來自Object原型）。[34]ECMAScript 5提供Object.create方法，可以顯式地建立實例還不是自動從Object繼承。[35]建構函式的prototype屬性決定了用於新物件的內部原型。可以透過修改建構函式的原型的方法來為物件添加新的方法。也可以修改JavaScript的內部物件的原型，如Array或Object。儘管可以這麼做，但對Object原型進行修改並不是一個好的做法。因為大多數JavaScript物件都會從Object繼承，且不會希望其原型做了修改。[36]

與大多數而向物件的語言不同，在JavaScript中函式定義與方法定義沒有明顯的區別。唯一的區別在於呼叫時：當函式被作為方法呼叫時，函式的this會指向呼叫此函式的物件。[37]

ECMAScript ES6加入了對class、extends關鍵字的支援，使得類的定義與繼承行為更加類似於其它物件導向語言，同時也更加容易使用。[38][39]

在JavaScript中，函式是一等的，函式也被認為是物件。因此，函式也可以有屬性與方法，例如call()和bind等。[40]巢狀函式指定義於其它函式內部的函式，在外部函式被呼叫時，巢狀函式會被建立。另外，巢狀函式是一個閉包，在外部函式的作用域（包括常數，局部變數和參數）都成為內部函式狀態的一部分，甚至在外部函式執行完畢後，內部函式的狀態依然保留。[41]JavaScript同時也支援匿名函式。[42]

JavaScript通常依賴於執行時環境（例如瀏覽器）來提供物件和方法，指令碼可以透過這些物件和方法與環境（例如網頁DOM）進行互動。它還依賴於執行時環境來提供包含/匯入指令碼（例如HTML的<script>元素）的功能。這本身不是語言功能，但是在大多數JavaScript實作中很常見。

JavaScript一般來說是單執行緒的。[43]為了並行地處理事件，JavaScript程式輸入/輸出是使用事件和回呼函式執行的。例如，這意味著JavaScript可以在等待資料庫查詢返回資訊時處理滑鼠單擊。ECMAScript ES6引入了Promise用於優雅地處理非同步事件，其可以使得傳統的基於回呼的非同步代碼更加清晰與簡單。[44][45]

JavaScript中函式的參數長度是可變的，在函式內部可以透過arguments物件存取這些參數。[46]

JavaScript是一種手稿語言，其原始碼在發往客戶端執行之前不需經過編譯，而是將文字格式的字元代碼發送給瀏覽器由瀏覽器解釋執行。直譯語言的弱點是安全性較差，而且在JavaScript中，如果一條執行不了，那麼下面的語言也無法執行。而其解決辦法就是於使用例外處理try {} catch () {}︰

JavaScript被歸類為直譯語言，因為目前主流的引擎都是每次執行時載入程式碼並解譯。V8是將所有程式碼解譯後再開始執行，其他引擎則是逐行解譯（SpiderMonkey會將解譯過的指令暫存，以提高效能，稱為即時編譯），但由於V8的核心部份多數用JavaScript撰寫（而SpiderMonkey是用C++），因此在不同的測試上，兩者效能互有優劣。

與其相對應的是編譯語言，例如C語言，以編譯語言編寫的程式在執行之前，必須經過編譯，將程式碼編譯為機器碼，再加以執行。

以下是一個簡單的JavaScript Hello World︰

或是在瀏覽器的網址列中使用javascript:，以互動方式表示：

JavaScript最初開發於1996年，被使用於Netscape Navigator網頁瀏覽器。同年微軟在Internet Explorer發布了一個實作。由於商標問題，這項實作被命名為JScript。1997年，JavaScript已經被網景公司提交給ECMA制定為標準，稱之為ECMAScript，標準編號ECMA-262。使用顯式版本號聲明對語言的參照，作爲一項Mozilla的特性，已在較新版本中被移除（至少為Firefox 59）。Firefox 4是最後一個需要顯式地在參照時聲明明確版本號的版本（1.8.5）。

下列表格的資訊基於多個參考來源[47][48][49][50]：





