面向切面的程式設計（Aspect-oriented programming，AOP，又譯作面向方面的程式設計、剖面導向程式設計）是電腦科學中的一種程式設計范型，旨在將橫切關注點與業務主體進行進一步分離，以提高程式碼的模組化程度。通過在現有代碼基礎上增加額外的通知（Advice）機制，能夠對被聲明為「切點（Pointcut）」的代碼塊進行統一管理與裝飾，如「對所有方法名以『set*』開頭的方法添加後台紀錄檔」。該范型使得開發人員能夠將與代碼核心業務邏輯關係不那麼密切的功能（如紀錄檔功能）添加至程式中，同時又不降低業務代碼的可讀性。面向切面的程式設計范型也是面向切面軟體開發的基礎。

面向切面的程式設計將代碼邏輯切分為不同的模組（即關注點（Concern），一段特定的邏輯功能)。幾乎所有的編程范型都涉及代碼功能的分類，將各個關注點封裝成獨立的抽象模組（如函式、過程、模組、類以及方法等），後者又可供進一步實現、封裝和重寫。部分關注點「橫切」程式碼中的數個模組，即在多個模組中都有出現，它們即被稱作橫切關注點（Cross-cutting concerns, Horizontal concerns）。

紀錄檔功能即是橫切關注點的一個典型案例，因為紀錄檔功能往往橫跨系統中的每個業務模組，即「橫切」所有有紀錄檔需求的類及方法體。而對於一個信用卡應用程式來說，存款、取款、帳單管理是它的核心關注點，紀錄檔和持久化將成為橫切整個物件結構的橫切關注點。

切面的概念源於對物件導向的程式設計和計算反射的融合，但並不只限於此，它還可以用來改進傳統的函式。與切面相關的編程概念還包括元物件協定、主題（Subject）、混入（Mixin）和委託（Delegate）。

從核心關注點中分離出橫切關注點是面向切面的程式設計的核心概念。分離關注點使得解決特定領域問題的代碼從業務邏輯中獨立出來，業務邏輯的代碼中不再含有針對特定領域問題代碼的呼叫，業務邏輯同特定領域問題的關係通過切面來封裝、維護，這樣原本分散在在整個應用程式中的變動就可以很好的管理起來。



最廣為人知的面向切面的編程庫是由全錄帕洛阿爾托研究中心開發的AspectJ，該語言可以和Java程式語言結合在一起使用。

在.NET Framework的環境，則有透過MSIL動態注入來實現AOP的PostSharp函式庫，但是到3.0版為為止，官方檔案中只註明適用於C#與VB.NET[1]，不適用於C++/CLI。

「面向切面的程式設計」這一術語出現的具體時間已經不可考證了，但該詞是由全錄帕洛阿爾托研究中心的Chris Maeda首先提出的。術語「橫切」是由Gregor Kiczales提出的。

同許多重大的技術創新一樣，面向切面的程式設計也是在不同的地方被獨立發展出來。面向切面編程的早期工作主要是由下面幾個機構和人員作出的。

